(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> 'NoneType' object is not callable"
p3
sS'layer'
p4
S'/home/www-data/web2py/applications/eduman/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\nfrom plugin_sqleditable.editable import SQLEDITABLE\nimport json\nSQLEDITABLE.init()\nREPORT_TITLE = \'\'\n@auth.requires_membership(\'misofficer\')\ndef index():\n    grid=\'\'\n    form=SQLFORM.factory(Field(\'matric_number\', label=\'Find Matric Number\'))\n    if form.accepts(request.vars, session):\n        record=db.student(db.student.matric_no == form.vars.matric_number)\n        if record != None:\n            grid=SQLFORM(db.student, record)\n\n        else:\n            gride = None\n            response.flash = \'No record found!\'\n\n\n    return dict(form=form, grid=grid)\n\n@auth.requires_login()\ndef student_page():\n\n    return locals()\n\ndef examrecord_page():\n\n    return locals()\n\n@auth.requires_membership(\'registry\')\ndef addstudent():\n    form=SQLFORM(db.student)\n\n    if form.accepts(request.vars,session):\n        response.flash = "Student " + form.vars.matric_no + " added"\n        #redirect(URL(\'studentmanager\'))\n    elif form.errors:\n        response.flash = str(form.errors)\n\n    return dict(form=form)\n\n@auth.requires_membership(\'admin\')\ndef addschool():\n\n    form=SQLFORM.grid(db.school, csv=True)\n    return dict(form=form)\n\n@auth.requires_membership(\'hod\')\ndef department():\n\n    return locals()\n\n@auth.requires_membership(\'dean\')\ndef add_dept():\n    form=SQLFORM(db.department)\n    return locals()\n\n@auth.requires_membership(\'hod\')\ndef man_dept():\n    department = db.department(HOD=auth.user.id)\n    form=SQLFORM.grid(db.program.department == department.id, csv=False,\n                      maxtextlength=80\n\n                      )\n    return dict(form=form, department=department)\n\n@auth.requires_membership(\'hod\')\ndef add_course():\n    department = db.department(HOD=auth.user.id)\n    coursequery = db.course_subject.department == department.id\n    form=SQLFORM.grid(coursequery, csv=False, maxtextlength=100)\n\n    return dict(form=form)\n@auth.requires_membership(\'hod\')\ndef setcurriculum():\n    department = db.department(HOD=auth.user.id)\n    qry = db.course_curriculum.program.belongs(db.program.department==department.id)\n    form=SQLFORM.grid(qry, orderby=db.course_curriculum.semester)\n\n    return dict(form=form, department=department)\n\n@auth.requires_membership(\'registry\')\ndef studentmanager():\n\n    form=SQLFORM.grid(db.student,\n                      user_signature=True,\n                      maxtextlength=50,\n                      formstyle =\'bootstrap3\',\n                      #fields=(\'matric_no\', \'surname\', \'service\', \'program\')\n\n                      ) #create=False, editable=True)\n    return locals()\n\n################### Account Section #################################################################\n\n@auth.requires_membership(\'account\')\ndef afitpay():\n    bankselect = SQLFORM.factory(\n                Field(\'method_of_pay\', requires=IS_IN_SET([\'BankTeller\', \'Etranzact\'])) #default=\'BankTeller\')\n                )\n\n    if bankselect.accepts(request.vars,session):\n        if bankselect.vars.method_of_pay == \'BankTeller\':\n            response.flash = \'Bank Details\'\n            redirect(URL(\'bankpay\'))\n\n        elif bankselect.vars.method_of_pay == \'Etranzact\':\n            response.flash = \'etranzact details\'\n            redirect(URL(\'epay\'))\n        else:\n            response.flash = \'error processing form inner\'\n\n    else:\n        response.flash = \'select mode of payment\'\n\n    return locals()\n\n@auth.requires_membership(\'account\')\ndef bankpay():\n    form = SQLFORM.grid(db.bank_pay,\n                        maxtextlength=50\n\n                        )\n    return locals()\n\n@auth.requires_membership(\'account\')\ndef epay():\n    form = SQLFORM.grid(db.etranzact,\n                        maxtextlength=50\n\n                        )\n    return locals()\n#####################Account Section End ########################\ndef load_curriculum(student_id, smester):\n    course=db.registered_course\n    curriculumdb = db.course_curriculum\n    curriculums = db(curriculumdb.program == db.student(id=student_id).program)(curriculumdb.semester == smester).select()\n    if curriculums:\n        for curriculum in curriculums:\n            course.insert(student=student_id, course_subject=curriculum.course_subject, credit_unit=curriculum.credit_unit, semester=curriculum.semester, sessions=CURRENT_SESSION, types=\'M\', status=\'CP\', scores=0.0)\n    else:\n        return None\n#load results into archresults from registered_course\ndef load_result(student_id):\n    course=db.archresult\n    resultdb = db.registered_course\n    results = db(resultdb.student == student_id).select()\n    if results:\n        for result in results:\n            course.insert(student=result.student, course_subject=result.course_subject, credit_unit=result.credit_unit, semester=result.semester, sessions=result.sessions, types=result.types, status=result.status, scores=result.scores, grade=result.grade, wp=result.wp, Wgp=result.Wgp, remark=result.remark)\n    else:\n        return None\n@auth.requires_membership(\'hod\')\ndef load_main_courses():\n    department = db.department(HOD=auth.user.id) or redirect(URL(\'reportnone\'))\n    form=SQLFORM.factory(Field(\'program\', \'reference program\', requires=IS_IN_DB(db(db.program.department==department.id), db.program.id, \'%(name)s %(classification)s %(the_option)s\')),\n                         Field(\'semester\', requires=IS_IN_SET([\'1st\', \'2nd\', \'3rd\', \'4th\']))\n\n                         )\n    #progs = db(db.program(id=form.vars.program).select())\n\n    if form.process().accepts:\n        studentss = db(db.student.program == form.vars.program).select()\n        enrolleds = db(db.sessions_enrol.student.belongs(studentss)).select()\n\n        for enrolled in enrolleds:\n            load_curriculum(enrolled.student, form.vars.semester)\n\n    else:\n        response.flash = \'error\'\n\n    return dict(form=form, department=department)\n\ndef updatescore(regno,subject ):\n    stdid = db.student(matric_no = regno).id\n    subid = db.course_subject(code=subject).id\n\n    getresult = db(db.registered_course.student == stdid)&(db.registered_course.course_subject == subid)\n\n    #return None\n    pass\n\n@auth.requires_membership(\'hod\')\ndef updatescores():\n    department = db.department(HOD=auth.user.id) or redirect(URL(\'reportnone\'))\n    form=SQLFORM.factory(Field(\'program\', \'reference program\', requires=IS_IN_DB(db(db.program.department==department.id), db.program.id, \'%(name)s %(classification)s %(the_option)s\')))\n    if form.process().accepts:\n        studentss = db(db.student.program == form.vars.program).select()\n        #raw_matrics = db(db.result_raw.student.belongs(studentss))._select(db.result_raw.student)\n        #reg_matrics = db(db.registered_course.student.belongs(raw_matrics)).select()\n        #raw_matrics = db(db.result_raw.student.belongs(raw_matrics)).select()\n        raw_matrics = db(db.result_raw.student.belongs(studentss)).select()\n\n        for matric in raw_matrics:\n            pass\n\n\n\n\n\n\n@auth.requires_membership(\'registry\')\ndef loadresults():\n    form=SQLFORM.factory(Field(\'student\', \'reference student\', requires=IS_IN_DB(db, db.student.id, \'%(matric_no)s\'))) #widget=SQLFORM.widgets.string))\n    #progs = db(db.program(id=form.vars.program).select())\n\n    if form.process().accepts:\n        load_result(form.vars.student)\n\n\n    else:\n        response.flash = \'error\'\n\n    return dict(form=form)\n\n\n@auth.requires_membership(\'registry\')\ndef add_result():\n\n    form = SQLFORM(db.registered_course)\n    if form.accepts(request.vars,session):\n       response.flash = \'result added\'\n    return dict(editable=form)\n\n\n############ Helper Funcations ###############################\n\n\n############### End Helper Function #############################\n\n\ndef checkmatric(form):\n    query = db.student.matric_no == form.vars.matric_no\n    if query == None:\n        form.errors.matric_no = \'Number do not exist\'\n\n    else:\n        redirect(URL(\'reportnone\'))\n\n\n@auth.requires_membership(\'hod\')\ndef findresult():\n    #REPORT-TITLE =\n    department = db.department(HOD=auth.user.id)\n    prgm = db(db.program.department == department.id).select()\n    inputbox = SQLFORM.factory(Field(\'matric_no\', \'reference student\', requires=IS_IN_DB(db(db.student.program.belongs(prgm)), db.student.matric_no)),\n                               #Field(\'semester\', requires=IS_IN_SET([\'1st\', \'2nd\', \'3rd\', \'4th\'])),\n                               Field(\'sessions\', \'reference school_session\', requires=IS_IN_DB(db,db.school_session.name, \'%(name)s\'))\n\n                               )\n    if inputbox.process().accepted:\n\n        record = db.student(matric_no = inputbox.vars.matric_no) or redirect(URL(\'reportnone\'))\n        #sessn_record=db(db.school_session.name == inputbox.vars.sessions).select().first() or redirect(URL(\'default\',\'reportnone\'))\n        sessn_record = db.school_session(name=inputbox.vars.sessions) or redirect(URL(\'default\',\'reportnone\'))\n        redirect(URL(\'showresults\', vars={\'id_no\':record.id,\'sessn\':inputbox.vars.sessions, \'sessn_id\':sessn_record.id, \'rpt\': \'RESULT SLIP\'}))\n    return dict(inputbox=inputbox)\n\n@auth.requires_membership(\'hod\')\ndef process_trans():\n    form = SQLFORM.factory(Field(\'matric_no\', requires=IS_NOT_EMPTY()),\n                               Field(\'sessions\', \'reference school_session\', requires=IS_IN_DB(db,db.school_session.name, \'%(name)s\' ))\n\n                               )\n    if form.process().accepted:\n        record = db.student(matric_no = form.vars.matric_no) or redirect(URL(\'reportnone\'))\n        sessn_record = db.school_session(name=form.vars.sessions) or redirect(URL(\'default\',\'reportnone\'))\n        redirect(URL(\'showtranscript\', vars={\'id_no\':record.id,\'sessn\':form.vars.sessions, \'sessn_id\':sessn_record.id, \'rpt\':\'TRANSCRIPT\'}))\n\n    return dict(form=form)\n\n@auth.requires_membership(\'registry\')\ndef showresults():\n\n    query = ((db.registered_course.student==request.vars.id_no) & (db.registered_course.sessions==request.vars.sessn_id))\n    form = SQLFORM.grid(query, orderby=db.registered_course.semester) #crud.select(db.registered_course, query)\n\n    return dict(form = form)\n\ndef showtranscript():\n    query = db.archresult.student==request.vars.id_no #& (db.registered_course.sessions==request.vars.sessn_id))\n    form = SQLFORM.grid(query, orderby=db.archresult.semester)\n\n    return dict(form=form)\n\n#@auth.requires_membership(\'registry\')\ndef reportnone():\n    message="Information does not exist"\n\n    return locals() #dict(message=message)\n\n\n#Define my apis here\n@request.restful()\ndef api():\n    response.view = \'generic.\'+request.extension\n    def GET(*args,**vars):\n        patterns = \'auto\'\n        parser = db.parse_as_rest(patterns,args,vars)\n        if parser.status == 200:\n            return dict(content=parser.response)\n        else:\n            raise HTTP(parser.status,parser.error)\n    def POST(table_name,**vars):\n        return db[table_name].validate_and_insert(**vars)\n    return locals()\n\n@request.restful()\ndef getStudentList():\n    response.view = \'generic.json\'\n\n    def GET():\n        #if not tablename==\'student\': raise HTTP(400)\n        return dict(studentlist=db(db.student.id > 0).select())\n    def POST(*args,**vars):\n        return dict()\n\n    return locals()\n\n@request.restful()\ndef getStudent():\n    response.view = \'generic.json\'\n\n    def GET(tablename, **vars):\n        if not tablename==\'student\': raise HTTP(400, json.dumps({\'message\': \'Bad Request ; wrong url\'}))\n        student = db.student(matric_no=request.vars.matric_no)\n        if student:\n            return dict(student=db.student(student.id))\n        else:\n            raise HTTP(401, json.dumps({\'message\':\'student matric no does not exist\'}))\n\n    def POST(tablename,**fields):\n        if not tablename==\'student\': raise HTTP(400, json.dumps({\'message\': \'Bad Request ; wrong url\'}))\n\n        ret = db.student.validate_and_insert(**fields)\n        if not ret.errors : return dict(message = \'Student Successfully Added!\', student=db.student(id=ret.id))\n\n        #else: raise HTTP(400, json.dumps({\'message\': ret.errors}))\n        else:\n            #for error in ret.errors:\n\n            raise HTTP(401, json.dumps(ret.errors.as_dict()))\n\n    def PUT(*args,**vars):\n        return dict()\n    def DELETE(*args,**vars):\n        return dict()\n    return locals()\n@request.restful()\ndef editStudent():\n    response.view = \'generic.json\'\n    def POST(tablename, matric_no, **fields):\n        #matric_no  = request.vars.matric_no\n        if not tablename == \'student\':\n            raise HTTP(400, json.dumps({\'message\': \'Bad Request ; wrong url\'}))\n\n        query = db.student(matric_no=matric_no) #db(db.student.matric_no == matric_no)\n        if not query:\n            raise HTTP(404, json.dumps({\'message\': \'No record Found\'}))\n\n        ret = db(db.student.id == query.id).validate_and_update(**fields)\n        if ret.updated:\n            return dict(student=db(db.student.id == query.id).select())\n        else:\n            raise HTTP(401, json.dumps(ret.errors.as_dict()))\n\n    return locals()\n@request.restful()\ndef getResult():\n    response.view = \'generic.json\'\n    def POST(tablename, matric_no, session):\n        if not tablename == \'registered_course\' : raise HTTP(400, json.dumps({\'message\':\'Bad Request\'}))\n        student = db.student(matric_no=matric_no)\n        if not student: raise HTTP(401, json.dumps({\'message\':\'Erron in matriculation number\'})) #test if student exist\n\n        query = db.registered_course.student==student.id\n        result = db(query)(db.registered_course.sessions==session).select()\n        semesters = db(query).select(db.registered_course.semester, db.registered_course.sessions, distinct=True)\n        #list of credit_unit\n        culist = []\n        wgplist = []\n        sgpa = []\n        cgpa = 0.0\n        for semester in semesters:\n            sumcu = db.registered_course.credit_unit.sum()\n            sumwgp = db.registered_course.Wgp.sum()\n            totalcu = db(query)(db.registered_course.sessions==session).select(sumcu).first()[sumcu]\n            totalwgp = db(query)(db.registered_course.sessions==session).select(sumwgp).first()[sumwgp]\n\n            #data.update({\'a\':1})\n            culist.append(totalcu)\n            wgplist.append(totalwgp)\n            if totalcu: #to avoid division by zero\n                sgpa.append(round(totalwgp/totalcu, 2))\n\n            cgpa = round(sum(wgplist)/sum(culist),2)\n\n        return dict(result=result, semester=semesters, sgpa=sgpa, cgpa=cgpa)\n\n    return locals()\n\n@request.restful()\ndef getTranscript():\n    response.view = \'generic.json\'\n    def POST(tablename, matric_no):\n        if not tablename == \'archresult\' : raise HTTP(400, json.dumps({\'message\':\'Bad Request\'}))\n        student = db.student(matric_no=matric_no)\n        if not student: raise HTTP(401, json.dumps({\'message\':\'Erron in matriculation number\'}))\n        query = db.archresult.student==student.id\n        result = db(query).select()\n        \n        #get the number of semesters\n        semesters = db(query).select(db.archresult.semester, db.archresult.sessions, distinct=True)\n        #Initialize arrays and values\n        culist = []\n        wgplist = []\n        sgpa = []\n        cgpa = 0.0\n        for semester in semesters:\n            sumcu = db.archresult.credit_unit.sum()\n            sumwgp = db.archresult.Wgp.sum()\n            totalcu = db(query)(db.archresult.sessions==session).select(sumcu).first()[sumcu]\n            totalwgp = db(query)(db.archresult.sessions==session).select(sumwgp).first()[sumwgp]\n\n        return dict(transcript=result, culist=culist)\n\n    return locals()\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\nresponse._vars=response._caller(getTranscript)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/www-data/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/www-data/web2py/applications/eduman/controllers/default.py", line 493, in <module>\n  File "applications/eduman/modules/plugin_sqleditable/editable.py", line 394, in extract\n    r=func()\n  File "/home/www-data/web2py/gluon/globals.py", line 359, in f\n    return rest_action(*_self.args, **getattr(_self, \'vars\', {}))\n  File "/home/www-data/web2py/applications/eduman/controllers/default.py", line 432, in POST\n    totalcu = db(query)(db.archresult.sessions==session).select(sumcu).first()[sumcu]\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/objects.py", line 2026, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/sqlite.py", line 125, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1226, in select\n    sql = self._select(query, fields, attributes)\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1124, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py", line 909, in expand\n    out = op(first, second, **optional_args)\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py", line 748, in AND\n    return \'(%s AND %s)\' % (self.expand(first), self.expand(second))\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py", line 909, in expand\n    out = op(first, second, **optional_args)\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py", line 806, in EQ\n    self.expand(second, first.type))\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py", line 920, in expand\n    return str(self.represent(expression,field_type))\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1371, in represent\n    return str(long(obj))\nTypeError: \'NoneType\' object is not callable\n'
p11
s.